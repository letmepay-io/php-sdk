<?php

namespace LetmepayIo\Tests\Integration;

use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use LetmepayIo\Sdk\Client;
use LetmepayIo\Sdk\DTO\Config;
use LetmepayIo\Sdk\Exceptions\Error;
use LetmepayIo\Tests\Fixtures\AuthFixture;
use PHPUnit\Framework\TestCase;

class ClientTest extends TestCase
{
    private Client $client;
    protected function setUp(): void
    {
        $config = new Config('auth_url', 'base_url', 'client_id', 'client_secret');
        $this->client = new Client($config);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     * @uses \LetmepayIo\Sdk\DTO\Config
     * @uses \LetmepayIo\Sdk\Exceptions\Error
     * @uses \LetmepayIo\Sdk\HttpResources\Requests\AuthenticationRequest
     * @uses \LetmepayIo\Sdk\HttpResources\Requests\GetPixChargeDetailsRequest
     * @uses \LetmepayIo\Sdk\HttpResources\Responses\ErrorLMPResponse
     * @covers \LetmepayIo\Sdk\Client
     */
    public function testWithAuthenticationError() : void
    {
        $mock = new MockHandler([
            new Response(401, [], AuthFixture::error()),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new GuzzleClient(['handler' => $handlerStack]);
        $this->client->setClient($client);

        try {
            $this->client->getQrCode('id');
        } catch (Error $e) {
            $this->assertEquals('Invalid Credentials.', $e->getMessage());
            $this->assertEquals(403, $e->getCode());
            $this->assertSame(['client_id' => 'client_id'], $e->getErrors());
        }
    }

    /**
     * @return void
     * @uses \LetmepayIo\Sdk\DTO\Config
     * @uses \LetmepayIo\Sdk\Exceptions\Error
     * @uses \LetmepayIo\Sdk\HttpResources\Requests\AuthenticationRequest
     * @uses \LetmepayIo\Sdk\HttpResources\Requests\GetPixChargeDetailsRequest
     * @uses \LetmepayIo\Sdk\HttpResources\Responses\ErrorLMPResponse
     * @covers \LetmepayIo\Sdk\Client
     */
    public function testCreateChargeSuccess() : void
    {
        $mock = new MockHandler([
            new Response(201, [], AuthFixture::error()),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new GuzzleClient(['handler' => $handlerStack]);
        $this->client->setClient($client);

        try {
            $this->client->getQrCode('id');
        } catch (Error $e) {
            $this->assertEquals('Invalid Credentials.', $e->getMessage());
            $this->assertEquals(403, $e->getCode());
            $this->assertSame(['client_id' => 'client_id'], $e->getErrors());
        }
    }
}